/* eslint-disable @typescript-eslint/no-explicit-any */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 RocketShip.glb -t -T -k -K -b s 
Files: RocketShip.glb [1.8MB] > C:\Users\owner\Desktop\lead_flow\public\3d\home\rocket-ship\RocketShip-transformed.glb [159.46KB] (91%)
Author: Nathaniel.F (https://sketchfab.com/NathanielLDEutc)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/rocket-ship-824473fbea704a0bbc95b19101ff15f9
Title: Rocket Ship
*/

import * as THREE from 'three'
import React, { JSX, useMemo } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { DissolveMaterial } from '@/_components/client/home/components/3d/DissolveMaterial'
import { useDissolveBaseMaterial } from '@/_components/client/home/components/3d/helpers/useDissolveMaterial'

type ActionName = 'Take 001'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    ['Cone001_01_-_Default_0']: THREE.Mesh
    ['Cone001_02_-_Default_0']: THREE.Mesh
    ['Cone001_03_-_Default_0']: THREE.Mesh
    ['Cone001_07_-_Default_0']: THREE.Mesh
    ['Cone001_09_-_Default_0']: THREE.Mesh
    ['Cone001_08_-_Default_0']: THREE.Mesh
  }
  materials: {
    ['01_-_Default']: THREE.MeshStandardMaterial
    ['02_-_Default']: THREE.MeshStandardMaterial
    ['03_-_Default']: THREE.MeshStandardMaterial
    ['07_-_Default']: THREE.MeshStandardMaterial
    ['09_-_Default']: THREE.MeshStandardMaterial
    ['08_-_Default']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default function RocketShip(props: any) {
  const group = React.useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF('/3d/home/rocket-ship/RocketShip-transformed.glb') as unknown as GLTFResult
  const { actions } = useAnimations(animations, group);
  console.log(props.onFadeOut);


const baseMat1 = useDissolveBaseMaterial();

const baseMat2 = useDissolveBaseMaterial();

const baseMat3 = useDissolveBaseMaterial();

const baseMat4 = useDissolveBaseMaterial();

const baseMat5 = useDissolveBaseMaterial();

const baseMat6 = useDissolveBaseMaterial();

  // Optional custom chrome material (unused currently, but ready to assign)
  const chromeMaterial = useMemo(() => {
    return new THREE.MeshPhysicalMaterial({
      metalness: 1,
      roughness: 0.1,
      envMapIntensity: 1,
      reflectivity: 1,
      clearcoat: 1,
      clearcoatRoughness: 0,
      color: new THREE.Color(0xeeeeee),
    })
  }, [])
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="RootNode" position={[104.779, 35.811, -1.921]} rotation={[-0.674, 0.687, 0.913]}>
          <group name="Cone001" position={[0, 207.268, 0]} rotation={[-Math.PI / 2, 0, 0]}>
            <mesh name="Cone001_01_-_Default_0" geometry={nodes['Cone001_01_-_Default_0'].geometry} material={baseMat1} >
              <DissolveMaterial
                baseMaterial={baseMat1}
                visible={props.disolveVisible}
                onFadeOut={props.onFadeOut}
              />
            </mesh>
            <mesh name="Cone001_02_-_Default_0" geometry={nodes['Cone001_02_-_Default_0'].geometry} material={baseMat2}  >
              <DissolveMaterial
                baseMaterial={baseMat2}
                visible={props.disolveVisible}
                onFadeOut={props.onFadeOut}
              />
            </mesh>
            <mesh name="Cone001_03_-_Default_0" geometry={nodes['Cone001_03_-_Default_0'].geometry} material={chromeMaterial} >
              <DissolveMaterial
                baseMaterial={baseMat3}
                visible={props.disolveVisible}
                onFadeOut={props.onFadeOut}
              />
            </mesh>

            <mesh name="Cone001_07_-_Default_0" geometry={nodes['Cone001_07_-_Default_0'].geometry} material={chromeMaterial} >
              <DissolveMaterial
                baseMaterial={baseMat4}
                visible={props.disolveVisible}
                onFadeOut={props.onFadeOut}
              />
            </mesh>
            <mesh name="Cone001_09_-_Default_0" geometry={nodes['Cone001_09_-_Default_0'].geometry} material={chromeMaterial} >
              <DissolveMaterial
                baseMaterial={baseMat5}
                visible={props.disolveVisible}
                onFadeOut={props.onFadeOut}
              />
            </mesh>
            <mesh name="Cone001_08_-_Default_0" geometry={nodes['Cone001_08_-_Default_0'].geometry} material={chromeMaterial} >
              <DissolveMaterial
                baseMaterial={baseMat6}
                visible={props.disolveVisible}
                onFadeOut={props.onFadeOut}
              />
            </mesh>
          </group>

        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/3d/home/rocket-ship/RocketShip-transformed.glb')
