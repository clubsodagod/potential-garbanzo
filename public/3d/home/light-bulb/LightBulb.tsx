/* eslint-disable @typescript-eslint/no-explicit-any */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 LightBulb.glb -t -T -k -K -b s 
Files: LightBulb.glb [1.42MB] > C:\Users\owner\Desktop\lead_flow\public\3d\home\light-bulb\LightBulb-transformed.glb [193.86KB] (86%)
Author: JacquelineM (https://sketchfab.com/JacquelineM)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/light-bulb-b05d65aada034ccebdc73d5982108ea2
Title: Light Bulb
*/

import * as THREE from 'three'
import React, { JSX, useMemo } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { DissolveMaterial } from '@/_components/client/home/components/3d/DissolveMaterial'
import { useDissolveBaseMaterial } from '@/_components/client/home/components/3d/helpers/useDissolveMaterial'
type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
    Object_3: THREE.Mesh
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    transparente_del_foco: THREE.MeshStandardMaterial
  }
}

export default function LightBulb(props: any) {
  const { nodes, materials } = useGLTF('/3d/home/light-bulb/LightBulb-transformed.glb') as unknown as GLTFResult

const baseMat1 = useDissolveBaseMaterial();
const baseMat2 = useDissolveBaseMaterial();


  // Optional custom chrome material (unused currently, but ready to assign)
  // const chromeMaterial = useMemo(() => {
  //   return new THREE.MeshPhysicalMaterial({
  //     metalness: 1,
  //     roughness: 0.1,
  //     envMapIntensity: 1,
  //     reflectivity: 1,
  //     clearcoat: 1,
  //     clearcoatRoughness: 0,
  //     color: new THREE.Color(0xeeeeee),
  //   })
  // }, [])

  
  return (
    <group {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <mesh name="Object_2" geometry={nodes.Object_2.geometry} material={baseMat1} rotation={[-Math.PI / 2, 0, 0]} >

          <DissolveMaterial
            baseMaterial={baseMat1}
            visible={props.dissolveVisible}
            onFadeOut={props.onFadeOut}
            color="#eb5a13"
          />
        </mesh>
        <mesh name="Object_3" geometry={nodes.Object_3.geometry} material={baseMat2} rotation={[-Math.PI / 2, 0, 0]} >

          <DissolveMaterial
            baseMaterial={baseMat2}
            visible={props.dissolveVisible}
            onFadeOut={props.onFadeOut}
            color="#eb5a13"
          />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/3d/home/light-bulb/LightBulb-transformed.glb')
