/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 quantum_cube.glb -t -T -k -K s 
Files: quantum_cube.glb [3.54MB] > C:\Users\owner\Desktop\lead_flow\public\3d\home\pearl-box\quantum_cube-transformed.glb [282.51KB] (92%)
Author: Tycho Magnetic Anomaly (https://sketchfab.com/Tycho_Magnetic_Anomaly)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/quantum-cube-02971982b92347d4b6ddbe1c0d6487c5
Title: Quantum Cube
*/

import * as THREE from 'three'
import React, { useRef, useMemo, JSX } from 'react'
import { useGLTF, useAnimations, MeshWobbleMaterial } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { DissolveMaterial } from '@/_components/client/home/components/3d/DissolveMaterial'

type ActionName = 'Animation'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh
    Object_8: THREE.Mesh
    Object_10: THREE.Mesh
    Object_12: THREE.Mesh
    Object_14: THREE.Mesh
    Object_16: THREE.Mesh
    Object_18: THREE.Mesh
    Object_20: THREE.Mesh
    Object_22: THREE.Mesh
    Object_24: THREE.Mesh
    Object_26: THREE.Mesh
    Object_6: THREE.Mesh
  }
  materials: {
    color: THREE.MeshStandardMaterial
    PaletteMaterial002: THREE.MeshStandardMaterial
    PaletteMaterial003: THREE.MeshStandardMaterial
    PaletteMaterial001: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

interface QuantumCubeProps {
  /**
   * Optional children to render inside the cube group.
   */
  z: boolean;
  onFadeOut:()=>void;
  props: JSX.IntrinsicElements['group'];
  children?: React.ReactNode;
}

/**
 * QuantumCube
 *
 * A 3D animated cube using GLTF, Drei, and custom wobble/scale/position animations.
 * Allows custom children to be nested within the cube's scene graph.
 *
 * @param {QuantumCubeProps} props - Props including children and native group props
 * @returns {JSX.Element} The rendered animated cube with optional nested children
 */
export default function QuantumCube({ children,onFadeOut, z, ...props }: QuantumCubeProps): JSX.Element {
  const groupRef = useRef<THREE.Group>(null)
  const wobbleRef = useRef<THREE.Mesh>(null)

  const { nodes, materials, animations } = useGLTF(
    '/3d/home/pearl-box/quantum_cube-transformed.glb'
  ) as unknown as GLTFResult

  const { actions } = useAnimations(animations, groupRef)

  // Play animation on mount
  useFrame(() => {
    if (actions.Animation) {
      actions.Animation.play()
    }
  })

  // Wobble animation
  useFrame(({ clock }) => {
    const t = clock.getElapsedTime()
    if (wobbleRef.current) {
      const scaleWobble = 0.1715
      const positionWobble = 0.25
      wobbleRef.current.scale.set(
        0.751 + Math.sin(t * 1.5) * scaleWobble,
        0.751 + Math.cos(t * 1.75) * scaleWobble,
        0.751 + Math.sin(t * 1.2) * scaleWobble
      )
      wobbleRef.current.position.set(
        Math.sin(t * 0.3) * positionWobble,
        Math.sin(t * 0.3) * positionWobble,
        Math.cos(t * 0.1) * positionWobble
      )
    }
  })

  // Optional custom chrome material (unused currently, but ready to assign)
  const chromeMaterial = useMemo(() => {
    return new THREE.MeshPhysicalMaterial({
      metalness: 1,
      roughness: 0.1,
      envMapIntensity: 1,
      reflectivity: 1,
      clearcoat: 1,
      clearcoatRoughness: 0,
      color: new THREE.Color(0xeeeeee),
    })
  }, [])

const baseMat1 = useMemo(() => {
  return new THREE.MeshStandardMaterial({
    color: 'silver',
    metalness: 1,
    roughness: 0,
  });
}, []);


  return (
    <group ref={wobbleRef} dispose={null} {...props}>
      <group name="Sketchfab_Scene">
        <group name="GLTF_SceneRootNode">

          <mesh visible={z}  name="Object_4" geometry={nodes.Object_4.geometry}>
            <DissolveMaterial
              baseMaterial={baseMat1}
              visible={z}
              onFadeOut={onFadeOut}
              color="#eb5a13"
            />
          </mesh>

          <group position={[0,-5,0]}>
            {children}
          </group>


          <group name="Cube002_2" scale={5.653}>
            <mesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials.PaletteMaterial002} />
          </group>
          <group name="Cube001_3" scale={5.653}>
            <mesh name="Object_10" geometry={nodes.Object_10.geometry} material={materials.PaletteMaterial002} />
          </group>
          <group name="Cube003_4" scale={5.653}>
            <mesh name="Object_12" geometry={nodes.Object_12.geometry} material={materials.PaletteMaterial003} />
          </group>
          <group name="Cube004_5" scale={5.653}>
            <mesh name="Object_14" geometry={nodes.Object_14.geometry} material={materials.PaletteMaterial002} />
          </group>
          <group name="Cube005_6" scale={5.653}>
            <mesh name="Object_16" geometry={nodes.Object_16.geometry} material={materials.PaletteMaterial002} />
          </group>
          <group name="Cube006_7" scale={5.653}>
            <mesh name="Object_18" geometry={nodes.Object_18.geometry} material={materials.PaletteMaterial002} />
          </group>
          <group name="Cube007_8" scale={5.653}>
            <mesh name="Object_20" geometry={nodes.Object_20.geometry} material={materials.PaletteMaterial002} />
          </group>
          <group name="Cube008_9" scale={5.653}>
            <mesh name="Object_22" geometry={nodes.Object_22.geometry} material={materials.PaletteMaterial002} />
          </group>
          <group name="Cube009_10" scale={5.653}>
            <mesh name="Object_24" geometry={nodes.Object_24.geometry} material={materials.PaletteMaterial002} />
          </group>
          <group name="Cube010_11" scale={5.653}>
            <mesh name="Object_26" geometry={nodes.Object_26.geometry} material={materials.PaletteMaterial002} />
          </group>

          {/* <group scale={5.653}>
            <mesh geometry={nodes.Object_12.geometry} material={materials.PaletteMaterial003} />
          </group> */}
        </group>

        <mesh
          name="Object_6"
          geometry={nodes.Object_6.geometry}
          material={materials.PaletteMaterial001}
          rotation={[-Math.PI, 0, 0]}
          scale={[-0.147, 0.147, 0.147]}
        />
      </group>



    </group>
  )
}

useGLTF.preload('/3d/home/pearl-box/quantum_cube-transformed.glb')
